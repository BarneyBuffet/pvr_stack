##! ./pvr/docker-compose.yaml
##!
##! PRIVATE VIDEO RECORDER - DOCKER COMPOSE STACK
##! 
##! Setup the arr stack with:
##! 
##! * Cloudflare: For internet reverse proxy behind SSO
##! * Transmission: For downloading torrents behind OpenVPN
##! * Prowlarr: For indexing torrent sites
##! * Heimdall: Dashboard for arr app status and bookmarks
##! * Sonarr: For managing tv shows
##! * Radarr: For managing movies
##! * Lidarr: For managing music
##! * Bazarr: For managing subtitles
##! * Overseer: For requesting and adding movies and tv shows
##! * Readarr: For managing audiobooks and ebooks
---
# networks:
#   default:
#     name: transmission_network
#     driver: bridge

services:
  ## ## CLOUDFLARE TUNNEL
  ##
  ## Internet reverse proxy
  cloudflared:
    # https://github.com/cloudflare/cloudflared/releases
    image: cloudflare/cloudflared:${CLOUDFLARED_VERSION:-latest}
    container_name: cloudflared
    depends_on:
      - transmission
    network_mode: "service:transmission"
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARED_TUNNEL_TOKEN}
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  ## ## TRANSMISSION OVER OPENVPN
  ##
  ## https://github.com/haugene/docker-transmission-openvpn
  transmission:
    ## https://github.com/haugene/docker-transmission-openvpn/releases
    image: haugene/transmission-openvpn:${TRANSMISSION_VERSION:-latest}
    container_name: transmission
    restart: unless-stopped
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN     # Documented requirements
      - MKNOD         # Allows creation of tun/tap in /dev/net/tun
      - NET_RAW       # for ping in healthcheck
    ports:
      - '5000:5000'   # Syncify
      - '5055:5055'   # Overseerr
      - '6767:6767'   # Bazarr
      - '7878:7878'   # Radarr
      - '8088:80'     # Heimdall
      - '8686:8686'   # Lidarr
      - '8787:8787'   # Readarr | eBooks
      - '8989:8989'   # Sonarr
      - '9091:9091'   # Transmission
      - '9696:9696'   # Prowlarr
      - "13378:13378" # Audiobookshelf
      - "8887:8887"   # Readarr | Audiobooks
      - "9705:9705"   # Huntarr
    volumes:
      - '${TRANSMISSION_PATH:-~/Docker/transmission}:/config:z'
      - '${DOWNLOADS_PATH:-~/Downloads}:/data:z'
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
      - CREATE_TUN_DEVICE=true
      - OPENVPN_PROVIDER=${OPENVPN_PROVIDER}
      - OPENVPN_CONFIG=${OPENVPN_CONFIG}
      - OPENVPN_USERNAME=${OPENVPN_USERNAME}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60 --dhcp-option DNS 9.9.9.9
      - WEBPROXY_ENABLED=false
      - LOCAL_NETWORK=${TRANSMISSION_LOCAL_NETWORK}
      - TRANSMISSION_SCRAPE_PAUSED_TORRENTS_ENABLED=false
      - TRANSMISSION_RPC_AUTHENTICATION_REQUIRED=true
      - TRANSMISSION_RPC_USERNAME=${TRANSMISSION_RPC_USERNAME}
      - TRANSMISSION_RPC_PASSWORD=${TRANSMISSION_RPC_PASSWORD}
      - TRANSMISSION_DOWNLOAD_QUEUE_SIZE=4
      - TRANSMISSION_WEB_UI=transmission-web-control
      - TRANSMISSION_ALT_SPEED_DOWN=1000
      - TRANSMISSION_ALT_SPEED_ENABLED=true
      - TRANSMISSION_ALT_SPEED_TIME_BEGIN=300
      - TRANSMISSION_ALT_SPEED_TIME_DAY=127
      - TRANSMISSION_ALT_SPEED_TIME_ENABLED=true
      - TRANSMISSION_ALT_SPEED_TIME_END=1380
      - TRANSMISSION_ALT_SPEED_UP=2
      - TRANSMISSION_PEER_PORT=47444
      - DNS=9.9.9.9,149.112.112.112
      - DISABLE_PORT_UPDATER=true
    logging:
      driver: json-file
      options:
          max-size: 10m
    healthcheck:
      test: ["CMD", "curl", "--connect-timeout", "15", "-o", "/dev/null", "--silent", "--show-error", "--fail", "http://localhost:9091" ]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 90s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
  
  ## ## PROWLARR
  ##
  ## Torrent indexer
  ## https://prowlarr.com/
  prowlarr:
    ## https://github.com/linuxserver/docker-prowlarr/releases
    image: lscr.io/linuxserver/prowlarr:${PROWLARR_VERSION:-latest}
    container_name: prowlarr
    network_mode: "service:transmission"
    restart: unless-stopped
    # Ports go through transmission vpn container
    # ports:
    #   - '9696:9696'
    depends_on:
      - transmission
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CUSTOM_SCRIPTS_PATH}:/custom_scripts:z
      - ${PROWLARR_PATH}/:/config:z
    healthcheck:
      test: ["CMD", "curl", "--connect-timeout", "15", "-o", "/dev/null", "--silent", "--show-error", "--fail", "http://localhost:9696" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  ## ## HEIMDALL
  ##
  ## An Application dashboard and launcher
  ## https://github.com/linuxserver/Heimdall
  heimdall:
    image: lscr.io/linuxserver/heimdall:${HEIMDALL_VERSION:-latest}
    container_name: heimdall
    depends_on:
      - transmission
    network_mode: "service:transmission"
    # ports:
    #  - '8088:443'
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${HEIMDALL_PATH}:/config:z
    # ports: # Not needed because we are going to use the tunnel
    #   - 11443:443
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
  
  ## ## SONARR
  ##
  ## Smart PVR for newsgroup and bittorrent users.
  ## https://sonarr.tv/
  ## https://github.com/linuxserver/docker-sonarr
  sonarr:
    ## https://github.com/linuxserver/docker-sonarr/releases 
    image: lscr.io/linuxserver/sonarr:${SONARR_VERSION:-latest}
    container_name: sonarr
    restart: unless-stopped
    depends_on:
      - transmission
      - prowlarr
    network_mode: "service:transmission"
    # Ports go through transmission vpn container
    # ports:
    #   - 8989:8989
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CUSTOM_SCRIPTS_PATH}:/custom_scripts:z
      - ${DOWNLOADS_PATH}:/downloads:z
      - ${SONARR_PATH}:/config:z
      - ${TV_SHOWS_PATH}:/tv:z
    healthcheck:
      test: ["CMD", "curl", "--connect-timeout", "15", "-o", "/dev/null", "--silent", "--show-error", "--fail", "http://localhost:8989" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
  
  ## ## RADARR
  ##
  ## Movie organizer/manager for usenet and torrent users.
  ## https://radarr.video/
  ## https://github.com/linuxserver/docker-radarr
  radarr:
    ## https://github.com/linuxserver/docker-radarr/releases
    image: lscr.io/linuxserver/radarr:${RADARR_VERSION:-latest}
    container_name: radarr
    restart: unless-stopped
    network_mode: "service:transmission"
    depends_on:
      - transmission
      - prowlarr
    # Ports go through transmission vpn container
    # ports:
    #   - '7878:7878'
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CUSTOM_SCRIPTS_PATH}:/custom_scripts:z
      - ${DOWNLOADS_PATH}:/downloads:z
      - ${MOVIES_PATH}:/movies:z
      - ${RADARR_PATH}:/config:z
    healthcheck:
      test: ["CMD", "curl", "--connect-timeout", "15", "-o", "/dev/null", "--silent", "--show-error", "--fail", "http://localhost:7878" ]
      # test: ["CMD", "pgrep", "-f", "Radarr"] # Check if Radarr process is running
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
  
  ## ## LIDARR
  ##
  ## Lidarr is a music collection manager for Usenet and BitTorrent users.
  ## https://lidarr.audio/
  ## https://github.com/linuxserver/docker-lidarr
  lidarr:
    ## https://github.com/linuxserver/docker-lidarr/releases
    image: lscr.io/linuxserver/lidarr:${LIDARR_VERSION:-latest}
    container_name: lidarr
    restart: unless-stopped
    network_mode: "service:transmission"
    depends_on:
      - transmission
      - prowlarr
    # ports:
    #   - '8686:8686'
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
      # - DOCKER_MODS=linuxserver/mods:lidarr-flac2mp3 #optional
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CUSTOM_SCRIPTS_PATH}:/custom_scripts:z
      - ${DOWNLOADS_PATH}:/downloads:z
      - ${LIDARR_PATH}:/config:z
      - ${MUSIC_PATH}:/music:z
    healthcheck:
      test: ["CMD", "curl", "--connect-timeout", "15", "-o", "/dev/null", "--silent", "--show-error", "--fail", "http://localhost:8686" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
  
  ## ## BAZARR
  ##
  ## Bazarr is a companion application to Sonarr and Radarr that manages and 
  ## downloads subtitles based on your requirements.
  ## https://www.bazarr.media/
  ## https://github.com/linuxserver/docker-bazarr
  bazarr:
    ## https://github.com/linuxserver/docker-bazarr/releases
    image: lscr.io/linuxserver/bazarr:${BAZARR_VERSION:-latest}
    container_name: bazarr
    restart: unless-stopped
    network_mode: "service:transmission"
    depends_on:
      - transmission
    # Ports go through transmission vpn container
    # ports:
    #   - '6767:6767'
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${BAZARR_PATH}:/config:z
      - ${MOVIES_PATH}:/movies:z
      - ${TV_SHOWS_PATH}:/tv:z
    healthcheck:
      test: ["CMD", "curl", "--connect-timeout", "15", "-o", "/dev/null", "--silent", "--show-error", "--fail", "http://localhost:6767" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  ## ## OVERSEERR
  ##
  ## Overseerr is a request management and media discovery tool built to work 
  ## with your existing Plex ecosystem.
  ## https://overseerr.dev/
  ## https://github.com/linuxserver/docker-overseerr
  overseerr:
    ## https://github.com/linuxserver/docker-overseerr/releases
    image: lscr.io/linuxserver/overseerr:${OVERSEERR_VERSION:-latest}
    container_name: overseerr
    restart: unless-stopped
    network_mode: "service:transmission"
    depends_on:
      - transmission
    # Ports go through transmission vpn container
    # ports:
    #   - '5055:5055'
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${OVERSEER_PATH}:/config:z
    healthcheck:
      test: ["CMD", "curl", "--connect-timeout", "15", "-o", "/dev/null", "--silent", "--show-error", "--fail", "http://localhost:5055" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
  
  ## ## READER - AUDIOBOOKS
  ##
  ## Monitor for new books from your favorite authors
  ## Readarr will only allow audibooks or ebooks per instance, so we need to
  ## create two instances and change the port configuration of one instance to
  ## avoid port conflict back and transmission openvpn service
  ## https://readarr.com/
  ## https://github.com/linuxserver/docker-readarr
  readarr_audiobooks:
    ## https://github.com/linuxserver/docker-readarr/releases
    image: lscr.io/linuxserver/readarr:${READARR_VERSION:-develop}
    container_name: readarr_audiobooks
    restart: unless-stopped
    network_mode: "service:transmission"
    ## Ports go through transmission vpn container
    ## Port updated in ${READARR_PATH}/audiobooks/config.xml to allow for two
    ## readarr instances (audio and ebooks)
    # ports:
    #   - 8887:8887
    depends_on:
      - transmission
      - prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${AUDIOBOOKS_PATH}:/audiobooks:z
      - ${CUSTOM_SCRIPTS_PATH}:/custom_scripts:z
      - ${DOWNLOADS_PATH}:/downloads:z
      - ${READARR_PATH}/audiobooks:/config:z
    healthcheck:
      test: ["CMD", "curl", "--connect-timeout", "15", "-o", "/dev/null", "--silent", "--show-error", "--fail", "http://localhost:8887" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  ## ## READER - EBOOKS
  ##
  ## Monitor for new books from your favorite authors
  ## Readarr will only allow audibooks or ebooks per instance, so we need to
  ## create two instances and change the port configuration of one instance to
  ## avoid port conflict back and transmission openvpn service
  ## https://readarr.com/
  ## https://github.com/linuxserver/docker-readarr
  readarr_ebooks:
    ## https://github.com/linuxserver/docker-readarr/releases
    image: lscr.io/linuxserver/readarr:${READARR_VERSION:-develop}
    container_name: readarr_ebooks
    restart: unless-stopped
    network_mode: "service:transmission"
    # Ports go through transmission vpn container
    # ports:
    #   - 8787:8787
    depends_on:
      - transmission
      - prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=${UMASK}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CUSTOM_SCRIPTS_PATH}:/custom_scripts:z
      - ${DOWNLOADS_PATH}:/downloads:z
      - ${EBOOKS_PATH}:/ebooks:z
      - ${READARR_PATH}/ebooks:/config:z
    healthcheck:
      test: ["CMD", "curl", "--connect-timeout", "15", "-o", "/dev/null", "--silent", "--show-error", "--fail", "http://localhost:8787" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  ### AUDIOBOOKSHELF
  ###
  ### Audiobookshelf is an open-source self-hosted media server for your 
  ### audiobooks and podcasts.
  ### https://www.audiobookshelf.org/
  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:${AUDIOBOOKSHELF_VERSION:-latest}
    container_name: audiobookshelf
    restart: unless-stopped
    depends_on:
      - transmission
    network_mode: "service:transmission"
    # ports:
    #   - 13378:80
    volumes:
      - ${AUDIOBOOKS_PATH:?AUDIOBOOKS_PATH variable missing}:/audiobooks:z
      - ${PODCASTS_PATH:?PODCASTS_PATH variable missing}:/podcasts:z
      - ${AUDIOBOOKSHELF_PATH:?AUDIOBOOKSHELF_PATH variable missing}/config:/config:z
      - ${AUDIOBOOKSHELF_PATH:?AUDIOBOOKSHELF_PATH variable missing}/metadata:/metadata:z
    environment:
      - TZ=${TZ}
      - PORT=13378
    healthcheck:
      test: ["CMD", "curl", "--connect-timeout", "15", "-o", "/dev/null", "--silent", "--show-error", "--fail", "http://localhost:13378" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
  
  huntarr:
    image: ghcr.io/plexguide/huntarr:${HUNTARR_VERSION:-latest}
    container_name: huntarr
    restart: unless-stopped
    network_mode: "service:transmission"
    depends_on:
      - transmission
    # ports:
    #   - "9705:9705"
    volumes:
      - ${HUNTARR_PATH:?HUNTARR_PATH variable missing}:/config:z
    environment:
      - TZ=${TZ}
    healthcheck:
      test: ["CMD", "curl", "--connect-timeout", "15", "-o", "/dev/null", "--silent", "--show-error", "--fail", "http://localhost:9705" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'

  # cleanuperr:
  #   image: ghcr.io/flmorg/cleanuperr:${HUNTARR_VERSION:-latest}
  #   container_name: cleanuperr
  #   restart: unless-stopped
  #   depends_on:
  #     - transmission
  #   # ports:
  #   #   - "9705:9705"
  #   # volumes:
  #   #   # - /your-path/huntarr:/config
  #   #   - ${CLEANARR_PATH:?CLEANARR_PATH variable missing}:/config
  #   environment:
  #     - TZ=${TZ}

  cleanuperr:
    image: ghcr.io/flmorg/cleanuperr:${CLEANUPERR_VERSION:-latest}
    restart: unless-stopped
    # volumes:
    #   # if you want persistent logs
    #   - ./cleanuperr/logs:/var/logs
    #   # if you want to ignore certain downloads from being processed
    #   - ./cleanuperr/ignored.txt:/ignored.txt
    #   # if you're using cross-seed and the hardlinks functionality
    #   - ./downloads:/downloads
    environment:
      - TZ=${TZ}
      - DRY_RUN=false
      - HTTP_MAX_RETRIES=0
      - HTTP_TIMEOUT=100
      - HTTP_VALIDATE_CERT=Enabled
      
      - LOGGING__LOGLEVEL=Information
      - LOGGING__FILE__ENABLED=false
      - LOGGING__FILE__PATH=/var/logs/
      - LOGGING__ENHANCED=true
      
      - SEARCH_ENABLED=true
      - SEARCH_DELAY=30
      
      - TRIGGERS__QUEUECLEANER=0 0/5 * * * ?
      - QUEUECLEANER__ENABLED=true
      - QUEUECLEANER__IGNORED_DOWNLOADS_PATH=/ignored.txt
      - QUEUECLEANER__RUNSEQUENTIALLY=true
      
      - QUEUECLEANER__IMPORT_FAILED_MAX_STRIKES=5
      - QUEUECLEANER__IMPORT_FAILED_IGNORE_PRIVATE=false
      - QUEUECLEANER__IMPORT_FAILED_DELETE_PRIVATE=false
      - QUEUECLEANER__IMPORT_FAILED_IGNORE_PATTERNS__0=title mismatch
      - QUEUECLEANER__IMPORT_FAILED_IGNORE_PATTERNS__1=manual import required
      
      - QUEUECLEANER__STALLED_MAX_STRIKES=5
      - QUEUECLEANER__STALLED_RESET_STRIKES_ON_PROGRESS=true
      - QUEUECLEANER__STALLED_IGNORE_PRIVATE=false
      - QUEUECLEANER__STALLED_DELETE_PRIVATE=false
      - QUEUECLEANER__DOWNLOADING_METADATA_MAX_STRIKES=5
      
      - QUEUECLEANER__SLOW_MAX_STRIKES=5
      - QUEUECLEANER__SLOW_RESET_STRIKES_ON_PROGRESS=true
      - QUEUECLEANER__SLOW_IGNORE_PRIVATE=false
      - QUEUECLEANER__SLOW_DELETE_PRIVATE=false
      - QUEUECLEANER__SLOW_MIN_SPEED=1MB
      - QUEUECLEANER__SLOW_MAX_TIME=20
      - QUEUECLEANER__SLOW_IGNORE_ABOVE_SIZE=60GB
      
      - TRIGGERS__CONTENTBLOCKER=0 0/5 * * * ?
      - CONTENTBLOCKER__ENABLED=true
      - CONTENTBLOCKER__IGNORED_DOWNLOADS_PATH=/ignored.txt
      - CONTENTBLOCKER__IGNORE_PRIVATE=false
      - CONTENTBLOCKER__DELETE_PRIVATE=false
      
      - TRIGGERS__DOWNLOADCLEANER=0 0 * * * ?
      - DOWNLOADCLEANER__ENABLED=true
      - DOWNLOADCLEANER__IGNORED_DOWNLOADS_PATH=/ignored.txt
      - DOWNLOADCLEANER__DELETE_PRIVATE=false
      
      - DOWNLOADCLEANER__CATEGORIES__0__NAME=tv-sonarr
      - DOWNLOADCLEANER__CATEGORIES__0__MAX_RATIO=1
      - DOWNLOADCLEANER__CATEGORIES__0__MIN_SEED_TIME=0
      - DOWNLOADCLEANER__CATEGORIES__0__MAX_SEED_TIME=240
      - DOWNLOADCLEANER__CATEGORIES__1__NAME=radarr
      - DOWNLOADCLEANER__CATEGORIES__1__MAX_RATIO=1
      - DOWNLOADCLEANER__CATEGORIES__1__MIN_SEED_TIME=0
      - DOWNLOADCLEANER__CATEGORIES__1__MAX_SEED_TIME=240
      - DOWNLOADCLEANER__CATEGORIES__2__NAME=cleanuperr-unlinked
      - DOWNLOADCLEANER__CATEGORIES__2__MAX_RATIO=1
      - DOWNLOADCLEANER__CATEGORIES__2__MIN_SEED_TIME=0
      - DOWNLOADCLEANER__CATEGORIES__2__MAX_SEED_TIME=240
      
      - DOWNLOADCLEANER__UNLINKED_TARGET_CATEGORY=cleanuperr-unlinked
      - DOWNLOADCLEANER__UNLINKED_USE_TAG=false
      - DOWNLOADCLEANER__UNLINKED_IGNORED_ROOT_DIR=/downloads
      - DOWNLOADCLEANER__UNLINKED_CATEGORIES__0=tv-sonarr
      - DOWNLOADCLEANER__UNLINKED_CATEGORIES__1=radarr
      
      - DOWNLOAD_CLIENT=transmission
      # OR
      # - DOWNLOAD_CLIENT=disabled
      # OR          
      # - DOWNLOAD_CLIENT=qBittorrent
      # - QBITTORRENT__URL=http://localhost:8080
      # - QBITTORRENT__URL_BASE=myCustomPath
      # - QBITTORRENT__USERNAME=user
      # - QBITTORRENT__PASSWORD=pass
      # OR
      # - DOWNLOAD_CLIENT=deluge
      # - DELUGE__URL=http://localhost:8112
      # - DELUGE__URL_BASE=myCustomPath
      # - DELUGE__PASSWORD=pass
      # OR
      # - DOWNLOAD_CLIENT=transmission
      # - TRANSMISSION__URL=http://localhost:9091
      # - TRANSMISSION__URL_BASE=myCustomPath
      # - TRANSMISSION__USERNAME=user
      # - TRANSMISSION__PASSWORD=pass
      
      - SONARR__ENABLED=true
      - SONARR__IMPORT_FAILED_MAX_STRIKES=-1
      - SONARR__SEARCHTYPE=Episode
      - SONARR__BLOCK__TYPE=blacklist
      # - SONARR__BLOCK__PATH=https://example.com/path/to/file.txt
      - SONARR__INSTANCES__0__URL=http://localhost:8989
      - SONARR__INSTANCES__0__APIKEY=${SONARR_APIKEY1}
      # - SONARR__INSTANCES__1__URL=http://localhost:8990
      # - SONARR__INSTANCES__1__APIKEY=sonarrSecret2
      
      - RADARR__ENABLED=true
      - RADARR__IMPORT_FAILED_MAX_STRIKES=-1
      - RADARR__BLOCK__TYPE=blacklist
      # - RADARR__BLOCK__PATH=https://example.com/path/to/file.txt
      - RADARR__INSTANCES__0__URL=http://localhost:7878
      - RADARR__INSTANCES__0__APIKEY=${RADARR_APIKEY1}
      # - RADARR__INSTANCES__1__URL=http://localhost:7879
      # - RADARR__INSTANCES__1__APIKEY=radarrSecret2
      
      - LIDARR__ENABLED=true
      - LIDARR__IMPORT_FAILED_MAX_STRIKES=-1
      - LIDARR__BLOCK__TYPE=blacklist
      # - LIDARR__BLOCK__PATH=https://example.com/path/to/file.txt
      - LIDARR__INSTANCES__0__URL=http://localhost:8686
      - LIDARR__INSTANCES__0__APIKEY=#{LIDARR_APIKEY1}
      # - LIDARR__INSTANCES__1__URL=http://localhost:8687
      # - LIDARR__INSTANCES__1__APIKEY=lidarrSecret2
      
      # - NOTIFIARR__ON_IMPORT_FAILED_STRIKE=true
      # - NOTIFIARR__ON_STALLED_STRIKE=true
      # - NOTIFIARR__ON_SLOW_STRIKE=true
      # - NOTIFIARR__ON_QUEUE_ITEM_DELETED=true
      # - NOTIFIARR__ON_DOWNLOAD_CLEANED=true
      # - NOTIFIARR__ON_CATEGORY_CHANGED=true
      # - NOTIFIARR__API_KEY=notifiarrSecret
      # - NOTIFIARR__CHANNEL_ID=discordChannelId
      
      # - APPRISE__ON_IMPORT_FAILED_STRIKE=true
      # - APPRISE__ON_STALLED_STRIKE=true
      # - APPRISE__ON_SLOW_STRIKE=true
      # - APPRISE__ON_QUEUE_ITEM_DELETED=true
      # - APPRISE__ON_DOWNLOAD_CLEANED=true
      # - APPRISE__ON_CATEGORY_CHANGED=true
      # - APPRISE__URL=http://apprise:8000
      # - APPRISE__KEY=myConfigKey